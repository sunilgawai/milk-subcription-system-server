generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  name            String
  address         String?
  phoneNumber     String?
  telephoneNumber String?
  password        String
  refresh_token   String? @unique
  reset_token     String? @unique
  subscriptions   Subscription[]
  notifications   Notification[]
  feedbacks       Feedback[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Subscription {
  id               String             @id @default(uuid())
  userId           String
  startDate        DateTime
  endDate          DateTime?
  subscriptionType SubscriptionType
  dailyQuantity    Float
  milkProductId    String
  status           SubscriptionStatus @default(ACTIVE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  user           User           @relation(fields: [userId], references: [id])
  milkProduct    MilkProduct    @relation(fields: [milkProductId], references: [id])
  milkDeliveries MilkDelivery[]
  invoices       Invoice[]
  customOrders   CustomOrder[]
}

model MilkProduct {
  id            String         @id @default(uuid())
  name          String
  pricePerLiter Float
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model MilkDelivery {
  id             String   @id @default(uuid())
  subscriptionId String
  deliveryDate   DateTime
  quantity       Float
  pricePerLiter  Float    @default(40)
  totalPrice     Float
  delivered      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  Feedback Feedback[]
}

model CustomOrder {
  id             String   @id @default(uuid())
  subscriptionId String
  orderDate      DateTime
  quantity       Float
  pricePerLiter  Float    @default(40)
  totalPrice     Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

model Invoice {
  id               String         @id @default(uuid())
  subscriptionId   String
  issueDate        DateTime       @default(now())
  startDate        DateTime
  endDate          DateTime
  baseAmount       Float
  additionalAmount Float          @default(0)
  totalAmount      Float
  discountId       String?
  status           InvoiceStatus  @default(PENDING)
  paymentMethod    PaymentMethod?
  paymentDate      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  discount     Discount?    @relation(fields: [discountId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Feedback {
  id         String   @id @default(uuid())
  userId     String
  deliveryId String
  rating     Int      @default(5)
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User         @relation(fields: [userId], references: [id])
  delivery MilkDelivery @relation(fields: [deliveryId], references: [id])
}

model Discount {
  id          String    @id @default(uuid())
  code        String    @unique
  description String?
  percentage  Float
  startDate   DateTime
  endDate     DateTime
  invoices    Invoice[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum SubscriptionType {
  DAILY
  WEEKLY
  MONTHLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAUSED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
}

enum NotificationType {
  DELIVERY
  INVOICE
  REMINDER
  PROMOTION
}
